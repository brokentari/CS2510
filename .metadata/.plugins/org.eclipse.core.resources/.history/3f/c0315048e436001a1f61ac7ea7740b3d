import tester.Tester;

interface ITransportation {
  boolean isMoreFuelEfficientThan(int mpg);
}

class Bicycle implements ITransportation {
  String brand;
  
  Bicycle (String brand) {
    this.brand = brand;
  }

  @Override
  public boolean isMoreFuelEfficientThan(int mpg) {
    return true;
  }
}

class Car implements ITransportation {
  String make;
  int mpg;
  
  Car (String make, int mpg) {
    this.make = make;
    this.mpg = mpg;
  }

  @Override
  public boolean isMoreFuelEfficientThan(int mpg) {
    return this.mpg >= mpg;
  }
}

class Person {
  String name;
  ITransportation mot;
  
  Person (String name, ITransportation mot) {
    this.name = name;
    this.mot = mot;
  }
  
  boolean motMeetsFuelEfficiency (int mpg) {
    return this.mot.isMoreFuelEfficientThan(mpg);
  }
}

class ExamplesPerson {
  ITransportation diamondback = new Bicycle("Diamondback");
  ITransportation toyota = new Car("Toyota", 30);
  ITransportation lambo = new Car("Lamborghini", 17);
  
  Person bob = new Person("bob", this.diamondback);
  Person ben = new Person("ben", this.toyota);
  Person becca = new Person("becca", this.lambo);
  
  boolean testFuelEfficiency(Tester t) {
    return t.checkExpect(this.bob.motMeetsFuelEfficiency(50), true) &&
           t.checkExpect(this.ben.motMeetsFuelEfficiency(40), false) &&
           t.checkExpect(this.becca.motMeetsFuelEfficiency(10), true);
  }
}